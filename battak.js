let time = 0;
let drawx = [];
let drawy = [];
// let fourierCoefficients = ["66.75-53.07i", "-135.66-45.57i", "10.72+16.52i", "-12.64+20.90i", "-44.85-23.71i"];
let fourierCoefficients =['0.028239271905090332-0.012326414148338741i', '0.03581620136070851-0.022099438426036684i', '0.04193847606116609-0.012118295307658386i', '0.04690034932371867-0.02206503650280608i', '0.022726824277795044-0.01729441952992116i', '0.051949094471097995-0.008604896491224999i', '0.06040425557391546-0.029131903524885126i', '0.0375713427042719-0.016081770191553817i', '0.04856716379997342-0.031814434603219144i', '0.0579209543152117-0.017407332430448383i', '0.0646002880526649-0.028798534446796614i', '0.029775803301856765-0.022888019037976118i', '0.07235879149319731-0.012764783270565301i', '0.08945964302683453-0.03961153409009995i', '0.05250044516487494-0.021943166221304114i', '0.06960292980616635-0.049264230193308785i', '0.08522410046138933-0.02692533099276468i', '0.0945827487932287-0.03901935297997336i', '0.040526873819540274-0.03185992377449988i', '0.10766989167813763-0.020669759577886644i', '0.14445893306710328-0.057062048883036946i', '0.07857166726539772-0.03183397250019026i', '0.108019767292691-0.08497742104544057i', '0.13772732253024755-0.046523894094508265i', '0.1514650034162512-0.054965792016453546i', '0.05729736971142001-0.047544736193353275i', '0.1767990504530439-0.038184637901721684i', '0.26685814157290144-0.08920977807921411i', '0.13030165962045065-0.05040489042547652i', '0.18992400527684317-0.1745777291376337i', '0.2594770538932703-0.0965513573930128i', '0.280213647318741-0.07725063823843385i', '0.07950929268471042-0.07824265172755507i', '0.3412883509463341-0.08770179564241817i', '0.6240136711180863-0.15722934410075806i', '0.25586737444605434-0.09050392081260866i', '0.4178960950372562-0.49790615447566994i', '0.6580756894443386-0.2867992251418103i', '0.6790817138500219-0.04554228903674385i', '0.014021164993978874-0.143874768125348i', '0.8935034845230476-0.30311657075978243i', '2.4245588726979075-0.31633152911209383i', '0.6823590656332129-0.16794219533382415i', '1.557686413518742-3.2475823107804924i', '3.8449887507818166-2.3178871269827965i', '3.0830822300872+3.8662983760829985i', '-8.650882410194523-0.11835267758905083i', '-1.1680849296317055+2.8905595389734113i', '-2.157624652199903-7.396612488778789i', '0.21461460293679815+23.360022077054055i', '1.6659240343856523+1.0408774789613975i', '43.99823822306824+52.6239980064165i', '5.355247110039981+10.512563957057086i', '11.433350928038976-21.846288657901702i', '5.355428855722086+9.715644785380999i', '-10.67510823610959-6.842928735526626i', '3.5004922095607265-1.7741360297403677i', '2.0203388492577665+1.7605284546050621i', '0.9653732725778289+0.22126552599874832i', '1.3108889471649854-1.1504918123671464i', '0.9478425519578058-0.7113662338633979i', '0.9074109698175951+0.25534231120037215i', '-0.18027595900706406-0.6944039931261761i', '0.573777597027201-0.26287015944650316i', '0.4769202699672326+0.12615263707918975i', '0.32991071101713326-0.010404192237167612i', '0.42002346680770164-0.3144124653719481i', '0.2790308540774785-0.18985761911429935i', '0.33913054149571775+0.038027633921476844i', '0.0693739526522621-0.23279605699458547i', '0.22220239707670608-0.09659481686649003i', '0.20800206647716996+0.009361276525668108i', '0.16343978479170165-0.018535585979228414i', '0.2034353393434916-0.1389636414356344i', '0.12743491383161415-0.08378967932870199i', '0.1747631530119304+0.008307008579094916i', '0.06990997465275017-0.1136861345673517i', '0.11674925436444065-0.0489143963104066i', '0.11599498963212357-0.00795110028904547i', '0.09716271942397403-0.015054395750261032i', '0.11961380027966684-0.07690606468128078i', '0.0717786023693043-0.04628513546706893i', '0.10608020844457206+0.0014180455037283157i', '0.05503766164242817-0.06670190854125432i', '0.071760668045287-0.029171247768631475i', '0.07391604909030625-0.010205351326862608i', '0.06431816369308077-0.01164799048275414i', '0.07869605837969365-0.04841415623216308i', '0.04567098845498815-0.029017166771793737i', '0.0710832868812732-0.0005621341264536589i', '0.04269836295128948-0.043617646465511486i', '0.04853577146841888-0.019206773211945374i', '0.051226049673342884-0.009479968784321585i', '0.045702820396648566-0.009133372677553653i', '0.05571809025865491-0.033120764437838096i', '0.031461795932324454-0.019727010866789393i', '0.05088930238111859-0.0011489727399085908i', '0.03368359915148828-0.030637406573611026i', '0.0350138212071778-0.01351178485123515i', '0.037612105855164384-0.008235956431659266i', '0.0341484406554743-0.00732449993288134i'];
let diff = 0.01;
let t = 0;

// while(t <= 1){
//     sum = math.complex(0,0);
//     for(let k = -2; k <= 2; k++){
//         sum = math.add(sum, math.multiply(math.complex(fourierCoefficients[k+2]), math.complex(Math.cos(-1*(2*Math.PI)*k*t),Math.sin(-1*(2*Math.PI)*k*t))));        
//     }
//     t+=diff;
// }

const complexStuff = function(ck){
    let real = math.re(ck);
    let imag = math.im(ck);

    let r = Math.sqrt( (real**2) + (imag**2) );
    let p = Math.atan(imag/real);

    let rp = [r,p];
    
    return rp;
}

function setup(){
    createCanvas(1880, 972);
}

function draw(){
    background('#1F2041');
    translate(940,486);

    let x = 0;
    let y = 0;
    let n = fourierCoefficients.length;

    for(let k = 0; k < n; k++){

        prevx=x;
        prevy=y;

        let scalling_rad = 2;
        let radius = scalling_rad * complexStuff(math.complex(fourierCoefficients[k]))[0];
        let phase = complexStuff(math.complex(fourierCoefficients[k]))[1] ;

        x += radius * cos((2*Math.PI*(k-(n/2))*time)+phase);
        y += radius * sin((2*Math.PI*(k-(n/2))*time)+phase); 
    
        stroke(255, 50);
        noFill();
        ellipse(prevx,prevy,radius * 2); 

        fill('#E9D2C0');
        stroke('#E9D2C0');
        line(prevx,prevy,x,y);
        ellipse(x,y,5)
    }
    drawx.unshift(x);
    drawy.unshift(y);

    beginShape();
    noFill();
    for(let i = 0; i < drawx.length; i++){
        vertex(drawx[i], drawy[i]);    
    }
    endShape();

    time += 0.002;
    let point_limit = 700

    if (drawx.length > point_limit){
        drawx.pop();
    }
    if ( drawy.length > point_limit){
        drawy.pop();
    }
}
